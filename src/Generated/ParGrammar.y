-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Generated.ParGrammar where
import AbsGrammar
import Generated.LexGrammar
import Generated.ErrM

}

%name pProgram Program
%name pDef Def
%name pListDef ListDef
%name pArg Arg
%name pListArg ListArg
%name pStm Stm
%name pListStm ListStm
%name pExp6 Exp6
%name pExp5 Exp5
%name pExp4 Exp4
%name pExp3 Exp3
%name pExp2 Exp2
%name pExp1 Exp1
%name pExp Exp
%name pListExp ListExp
%name pIncDecOp IncDecOp
%name pMulOp MulOp
%name pAddOp AddOp
%name pCmpOp CmpOp
%name pBoolLiteral BoolLiteral
%name pType Type
%name pListId ListId
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!=' { PT _ (TS _ 1) }
  '&&' { PT _ (TS _ 2) }
  '(' { PT _ (TS _ 3) }
  ')' { PT _ (TS _ 4) }
  '*' { PT _ (TS _ 5) }
  '+' { PT _ (TS _ 6) }
  '++' { PT _ (TS _ 7) }
  ',' { PT _ (TS _ 8) }
  '-' { PT _ (TS _ 9) }
  '--' { PT _ (TS _ 10) }
  '/' { PT _ (TS _ 11) }
  ';' { PT _ (TS _ 12) }
  '<' { PT _ (TS _ 13) }
  '<=' { PT _ (TS _ 14) }
  '=' { PT _ (TS _ 15) }
  '==' { PT _ (TS _ 16) }
  '>' { PT _ (TS _ 17) }
  '>=' { PT _ (TS _ 18) }
  'bool' { PT _ (TS _ 19) }
  'double' { PT _ (TS _ 20) }
  'else' { PT _ (TS _ 21) }
  'false' { PT _ (TS _ 22) }
  'if' { PT _ (TS _ 23) }
  'int' { PT _ (TS _ 24) }
  'return' { PT _ (TS _ 25) }
  'true' { PT _ (TS _ 26) }
  'void' { PT _ (TS _ 27) }
  'while' { PT _ (TS _ 28) }
  '{' { PT _ (TS _ 29) }
  '||' { PT _ (TS _ 30) }
  '}' { PT _ (TS _ 31) }

L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }
L_Id { PT _ (T_Id $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
Id    :: { Id} : L_Id { Id ($1)}

Program :: { Program }
Program : ListDef { AbsGrammar.PDefs (reverse $1) }
Def :: { Def }
Def : Type Id '(' ListArg ')' '{' ListStm '}' { AbsGrammar.DefFun $1 $2 $4 (reverse $7) }
ListDef :: { [Def] }
ListDef : {- empty -} { [] } | ListDef Def { flip (:) $1 $2 }
Arg :: { Arg }
Arg : Type Id { AbsGrammar.ArgDecl $1 $2 }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
Stm :: { Stm }
Stm : Exp ';' { AbsGrammar.StmExp $1 }
    | Type ListId ';' { AbsGrammar.StmDecls $1 $2 }
    | Type Id '=' Exp ';' { AbsGrammar.StmInit $1 $2 $4 }
    | 'return' Exp ';' { AbsGrammar.StmReturn $2 }
    | 'while' '(' Exp ')' Stm { AbsGrammar.StmWhile $3 $5 }
    | '{' ListStm '}' { AbsGrammar.StmBlock (reverse $2) }
    | 'if' '(' Exp ')' Stm 'else' Stm { AbsGrammar.StmIfElse $3 $5 $7 }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] } | ListStm Stm { flip (:) $1 $2 }
Exp6 :: { Exp }
Exp6 : BoolLiteral { AbsGrammar.ExpBool $1 }
     | Integer { AbsGrammar.ExpInt $1 }
     | Double { AbsGrammar.ExpDouble $1 }
     | Id { AbsGrammar.ExpId $1 }
     | Id '(' ListExp ')' { AbsGrammar.ExpApp $1 $3 }
     | Id IncDecOp { AbsGrammar.ExpPost $1 $2 }
     | IncDecOp Id { AbsGrammar.ExpPre $1 $2 }
     | '(' Exp ')' { $2 }
Exp5 :: { Exp }
Exp5 : Exp5 MulOp Exp6 { AbsGrammar.ExpMul $1 $2 $3 } | Exp6 { $1 }
Exp4 :: { Exp }
Exp4 : Exp4 AddOp Exp5 { AbsGrammar.ExpAdd $1 $2 $3 } | Exp5 { $1 }
Exp3 :: { Exp }
Exp3 : Exp4 CmpOp Exp4 { AbsGrammar.ExpCmp $1 $2 $3 } | Exp4 { $1 }
Exp2 :: { Exp }
Exp2 : Exp2 '&&' Exp3 { AbsGrammar.ExpAnd $1 $3 } | Exp3 { $1 }
Exp1 :: { Exp }
Exp1 : Exp1 '||' Exp2 { AbsGrammar.ExpOr $1 $3 } | Exp2 { $1 }
Exp :: { Exp }
Exp : Id '=' Exp { AbsGrammar.ExpAssg $1 $3 } | Exp1 { $1 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
IncDecOp :: { IncDecOp }
IncDecOp : '++' { AbsGrammar.OpInc } | '--' { AbsGrammar.OpDec }
MulOp :: { MulOp }
MulOp : '*' { AbsGrammar.OpTimes } | '/' { AbsGrammar.OpDiv }
AddOp :: { AddOp }
AddOp : '+' { AbsGrammar.OpPlus } | '-' { AbsGrammar.OpMinus }
CmpOp :: { CmpOp }
CmpOp : '<' { AbsGrammar.OpLt }
      | '>' { AbsGrammar.OpGt }
      | '<=' { AbsGrammar.OpLtEq }
      | '>=' { AbsGrammar.OpGtEq }
      | '==' { AbsGrammar.OpEq }
      | '!=' { AbsGrammar.OpNEq }
BoolLiteral :: { BoolLiteral }
BoolLiteral : 'true' { AbsGrammar.LTrue } | 'false' { AbsGrammar.LFalse }
Type :: { Type }
Type : 'bool' { AbsGrammar.Type_bool }
     | 'int' { AbsGrammar.Type_int }
     | 'double' { AbsGrammar.Type_double }
     | 'void' { AbsGrammar.Type_void }
ListId :: { [Id] }
ListId : Id { (:[]) $1 } | Id ',' ListId { (:) $1 $3 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

